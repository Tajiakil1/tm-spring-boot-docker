pipeline {
  environment {
    PROJECT = "sandbox-io-289003"
    APP_NAME = "taj-app-1"
    FE_SVC_NAME = "${APP_NAME}-frontend"
    CLUSTER = "jenkins-cd"
    CLUSTER_ZONE = "us-east1-d"
    IMAGE_TAG = "gcr.io/${PROJECT}/${APP_NAME}:${env.BRANCH_NAME}.${env.BUILD_NUMBER}"
    JENKINS_CRED = "${PROJECT}"
  }

  agent {
    kubernetes {
      label 'taj-agent'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
   components: ci
spec:
  # Use service account that can deploy to all namespaces
  serviceAccountName: cd-jenkins
  containers:
  - name:  maven
    image:  maven
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
  - name: kaniko
    image: gcr.io/kaniko-project/executor:v1.6.0-debug
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - 99d
"""
}
  }
  stages {
    stage('Compilation') {
       steps {
        container('maven') {
          dir("spring-boot-app") {
           sh "mvn -v"
           sh "mvn clean install -DskipTests"
          }
        }
      }  
     } 
     stage('Build and push image with GCR') {
      steps {
        container('kaniko') {
          dir("spring-boot-app") { 
          sh "/kaniko/executor -f `pwd`/Dockerfile -c `pwd` --insecure --skip-tls-verify --cache=true --destination=${IMAGE_TAG}" 
         }
        } 
      }
    }
    stage('Deploy to kubernetes') {
      steps {
        container('kubectl') {
          dir("spring-boot-app") {
           sh "kubectl apply -f deployment.yaml"
          }
        }
      }
   }
  } 
}  